{"name":"_.dom","tagline":"This is plugin for \"_\". This contains functional API of DOM manipulation.","body":"# underscore.dom [![Build Status](https://travis-ci.org/1000ch/underscore.dom.png?branch=master)](https://travis-ci.org/1000ch/underscore.dom)\r\n\r\n## About\r\n\r\nThis is plugin which provides API for DOM operation for underscore.js/lo-dash.js.\r\n\r\n## Build\r\n\r\nYou can build with following command.\r\n\r\n```sh\r\n$ grunt build\r\n```\r\n\r\nThis supports build for following libraries which provide Ajax or Promise.\r\n\r\n+ [ded/reqwest](https://github.com/ded/reqwest)\r\n+ [cujojs/when](https://github.com/cujojs/when)\r\n\r\n```sh\r\n$ git submodule init\r\n$ git submodule update\r\n$ grunt build\r\n```\r\n\r\nThey will be mapped to `_.ajax` and `_.when`.\r\n\r\n## Selector API\r\n\r\n### _.qsa(selector, context)\r\n\r\nGet all elements selected with css selector.\r\n\r\n```js\r\n//context is optional parameter.\r\n//if context is empty, element will be searched with document as context\r\nvar elements = _.qsa(\"tagName .className\", document);\r\n```\r\n\r\n### _.qs(selector, context)\r\n\r\nGet first element selected with css selector.\r\n\r\n```js\r\n//context is optional parameter.\r\n//if context is empty, element will be searched with document as context\r\nvar element = _.qs(\"tagName .className\", document);\r\n```\r\n\r\n## Event API\r\n\r\n### _.ready(callback)\r\n\r\nHandle `DOMContentLoaded` event.\r\n\r\n```js\r\n_.ready(function() {\r\n    console.log(\"DOMContentLoaded\");\r\n});\r\n```\r\n\r\n### _.on(targetElements, type, callback)\r\n\r\nAdd event to element.\r\n\r\n```js\r\nvar clickCallback = function() {\r\n    console.log(\"element is clicked.\");\r\n};\r\n\r\nvar targetElements = _.qsa(\".targetClass\");\r\n\r\n_.on(targetElements, \"click\", clickCallback);\r\n```\r\n\r\n### _.off(targetElements, type, callback)\r\n\r\nRemove event from element. \r\n\r\n```js\r\nvar clickCallback = function() {\r\n    console.log(\"element is clicked.\");\r\n};\r\n\r\nvar targetElements = _.qsa(\".targetClass\");\r\n\r\n_.off(targetElements, \"click\", clickCallback);\r\n```\r\n\r\n### _.on(targetElements, type, selector, callback)\r\n\r\nAttach delegated event handler to elements which matches css selector.\r\n\r\n```js\r\nvar clickCallback = function() {\r\n    console.log(\"span is clicked.\");\r\n};\r\n\r\nvar targetElements = _.qsa(\".targetClass\");\r\n\r\n_.on(targetElements, \"click\", \"button\", clickCallback);\r\n```\r\n\r\n### _.off(targetElements, type, selector, callback)\r\n\r\nDetach delegated event handler from elements.\r\n\r\n```js\r\nvar clickCallback = function() {\r\n    console.log(\"span is clicked.\");\r\n};\r\n\r\nvar targetElements = _.qsa(\"targetTag\");\r\n\r\n_.off(targetElements, \"click\", \"button\", clickCallback);\r\n```\r\n\r\n## Manipulation API\r\n\r\n### _.addClass(targetElements, className)\r\n\r\nAdd class to element. \r\n\r\n```js\r\nvar targetElemenets = _.qsa(\".targetClass\");\r\n\r\n_.addClass(targetElemenets, \"addClassName\");\r\n```\r\n\r\n### _.removeClass(targetElements, className)\r\n\r\nRemove class from element. \r\n\r\n```js\r\nvar targetElemenets = _.qsa(\".targetClass\");\r\n\r\n_.removeClass(targetElemenets, \"removeClassName\");\r\n```\r\n\r\n### _.toggleClass(targetElements, className)\r\n\r\nToggle class of element.\r\n\r\n```js\r\nvar targetElemenets = _.qsa(\".targetClass\");\r\n\r\n_.toggleClass(targetElemenets, \"toggleClassName\");\r\n```\r\n\r\n## License\r\n\r\nCopyright [1000ch.net](http://1000ch.net/)  \r\nReleased under the MIT license.  \r\n","google":"UA-39918995-1","note":"Don't delete this file! It's used internally to help with page regeneration."}