{"name":"Underscore.affix","tagline":"This is plugin for \"_\". This contains functional API of DOM manipulation.","body":"# underscore.affix [![Build Status](https://travis-ci.org/1000ch/underscore.affix.png?branch=master)](https://travis-ci.org/1000ch/underscore.affix)\r\n\r\n## About\r\n\r\n`_`のdom系のAPI拡張。  \r\n`_`に入れないほうがいいような気もしたけど、  \r\n`_`に依存しているし、`$`を使うわけにもいかないので。  \r\n\r\n## Build\r\n\r\n以下のコマンドでbuild出来ます。\r\n\r\n```sh\r\ngrunt build\r\n```\r\n\r\nAjaxとかDeferredも使いたい場合もあるかなということで  \r\n以下を含んだビルドもサポートしています。  \r\n\r\n+ [ded/reqwest](https://github.com/ded/reqwest)\r\n+ [cujojs/when](https://github.com/cujojs/when)\r\n\r\n```sh\r\ngit submodule init\r\ngit submodule update\r\ngrunt build\r\n```\r\n\r\nそれぞれ、`_.ajax`と`_.when`にマッピングしてあるので、  \r\nリポジトリのドキュメント見ながら使ってください。  \r\n\r\n## Selector API\r\n\r\n### _.qsa(selector, context)\r\n\r\n指定のCSSセレクタに該当する要素をすべて取得します。  \r\n\r\n```js\r\n//context is optional parameter.\r\n//if context is empty, element will be searched with document as context\r\nvar elements = _.qsa(\"tagName .className\", document);\r\n```\r\n\r\n### _.qs(selector, context)\r\n\r\n指定のCSSセレクタに該当する要素のうち、先頭の要素を取得します。  \r\n\r\n```js\r\n//context is optional parameter.\r\n//if context is empty, element will be searched with document as context\r\nvar element = _.qs(\"tagName .className\", document);\r\n```\r\n\r\n## Event API\r\n\r\n### _.ready(callback)\r\n\r\nDOMツリーが構築された時に発火するイベントを指定します。  \r\n\r\n```js\r\n_.ready(function() {\r\n    console.log(\"DOMContentLoaded\");\r\n});\r\n```\r\n\r\n### _.on(targetElements, type, callback)\r\n\r\n指定の要素にイベントをバインドします。  \r\n\r\n```js\r\nvar clickCallback = function() {\r\n    console.log(\"element is clicked.\");\r\n};\r\n\r\nvar targetElements = _.qsa(\".targetClass\");\r\n\r\n_.on(targetElements, \"click\", clickCallback);\r\n```\r\n\r\n### _.off(targetElements, type, callback)\r\n\r\n指定の要素からイベントをアンバインドします。  \r\n\r\n```js\r\nvar clickCallback = function() {\r\n    console.log(\"element is clicked.\");\r\n};\r\n\r\nvar targetElements = _.qsa(\".targetClass\");\r\n\r\n_.off(targetElements, \"click\", clickCallback);\r\n```\r\n\r\n### _.on(targetElements, type, selector, callback)\r\n\r\n指定の要素にイベントを移譲し、指定のCSSセレクタに該当する子要素が  \r\nある場合イベントを発火します。  \r\n\r\n```js\r\nvar clickCallback = function() {\r\n    console.log(\"span is clicked.\");\r\n};\r\n\r\nvar targetElements = _.qsa(\".targetClass\");\r\n\r\n_.on(targetElements, \"click\", \"button\", clickCallback);\r\n```\r\n\r\n### _.off(targetElements, type, selector, callback)\r\n\r\n指定の要素にイベントを移譲されている場合、それを除きます。\r\n\r\n```js\r\nvar clickCallback = function() {\r\n    console.log(\"span is clicked.\");\r\n};\r\n\r\nvar targetElements = _.qsa(\"targetTag\");\r\n\r\n_.off(targetElements, \"click\", \"button\", clickCallback);\r\n```\r\n\r\n## Manipulation API\r\n\r\n### _.addClass(targetElements, className)\r\n\r\n指定の要素にクラスを追加します。  \r\n\r\n```js\r\nvar targetElemenets = _.qsa(\".targetClass\");\r\n\r\n_.addClass(targetElemenets, \"addClassName\");\r\n```\r\n\r\n### _.removeClass(targetElements, className)\r\n\r\n指定の要素からクラスを削除します。  \r\n\r\n```js\r\nvar targetElemenets = _.qsa(\".targetClass\");\r\n\r\n_.removeClass(targetElemenets, \"removeClassName\");\r\n```\r\n\r\n### _.toggleClass(targetElements, className)\r\n\r\n指定の要素のクラスをトグルします。  \r\n\r\n```js\r\nvar targetElemenets = _.qsa(\".targetClass\");\r\n\r\n_.toggleClass(targetElemenets, \"toggleClassName\");\r\n```\r\n\r\n##License\r\n\r\nCopyright [1000ch.net](http://1000ch.net/)  \r\nReleased under the MIT license.  \r\n","google":"UA-39918995-1","note":"Don't delete this file! It's used internally to help with page regeneration."}